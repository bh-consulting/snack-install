#!/bin/bash
###########################
# Parameters / Paramètres #
###########################
PAQUETNAME=snack
VERSION=1.0
DATABASE=radius

USER=snack
USER_HOME=/home/snack

APACHE_PATH=/etc/apache2
OUT=/tmp/snack_out.log
LOG=/tmp/snack_errors.log

DEST_PATH=$USER_HOME/cert

CERT_VALIDITY=3650 #ten years

INTERFACE_USER=www-data
RADIUS_USER=freerad

CA_KEY=cakey.pem
CA_REQ=careq.pem
CA_CERT=cacert.pem
CA_CERT_CER=cacert.cer

RADIUS_KEY=radius_key.pem
RADIUS_REQ=radius_req.pem
RADIUS_CERT=radius_cert.pem

BACKUP_FOLDER=$USER_HOME/backups.git
TFTP_FOLDER=$USER_HOME/tftp
TFTP_OPTIONS="--secure -c -U 525"

DATABASEFILE=$USER_HOME/interface/app/Config/database.php

set -e
. /usr/share/debconf/confmodule

function convertsnackusers {
    PASS=`grep password $DATABASEFILE | head -n 1 | cut -d'>' -f2 | cut -d"'" -f2`
    mysql -uradius -p${PASS} radius -e "CREATE TABLE snackuser (\
        id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,\
        username VARCHAR(50),\
        password VARCHAR(255),\
        role VARCHAR(20),\
        created DATETIME DEFAULT NULL,\
        modified DATETIME DEFAULT NULL\
    );"
    salt=$(grep "Security.salt" /home/snack/interface/app/Config/core.php | cut -d"'" -f4)
    users=$(mysql -uradius -p${PASS} radius -N -B -e "select username from raduser where role in ('root','admin','tech');")
    sqldate=$(date "+%Y-%m-%d %H:%M:%S")
    for user in $users
    do
        echo "insert $user"
        role=$(mysql -uradius -p${PASS} radius -N -B -e "select role from raduser where username='$user';")
        password=$(mysql -uradius -p${PASS} radius -N -B -e "select value from radcheck where username='$user' and attribute='Cleartext-Password';")
        cryptpass=$(echo -n "$salt$password" | sha1sum | awk '{print $1}')
        mysql -uradius -p${PASS} radius -e "INSERT INTO snackuser(username, password, role, created) VALUES ('$user', '$cryptpass', '$role', '$sqldate');"
	mysql -uradius -p${PASS} radius -e "DELETE FROM raduser WHERE username='$user';"
	mysql -uradius -p${PASS} radius -e "DELETE FROM radcheck WHERE username='$user';"
    done
}

function installelasticsearch {
    /usr/sbin/td-agent-gem install fluent-plugin-record-reformer
    /usr/sbin/td-agent-gem install fluent-plugin-elasticsearch
    pip install elasticsearch-curator
    mv /var/lib/elasticsearch /home/snack
    chown -R elasticsearch:elasticsearch /var/log/elasticsearch
    chown -R elasticsearch:elasticsearch /home/snack/elasticsearch
    service td-agent restart
    sudo update-rc.d elasticsearch defaults 95 10
    /usr/share/elasticsearch/bin/plugin -install mobz/elasticsearch-head
    service elasticsearch restart
    service rsyslog restart
    netstat -ltn | grep 9200 > /dev/null
    x=1
    while [ $x -le 50 ]
    do
    	echo "Wait elasticsearch-head ..."
    	netstat -ltn | grep 9200 > /dev/null
   	if [[ $? == 0 ]]; then
            break
        fi
        x=$(( $x + 1 ))
        sleep 1
    done
    curl -XPUT localhost:9200/_template/template_1 -d '
{
    "template" : "logstash*",
    "settings" : {
        "number_of_shards" : 1
    },
    "mappings" : {
        "fluentd": {
        "properties": {
          "@timestamp": {
            "type": "date",
            "format": "dateOptionalTime"
          },
          "facility": {
            "type": "string"
          },
          "host": {
            "type": "string",
            "index": "not_analyzed"
          },
          "ident": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "pid": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          }
        }
      }
    }
}'
}

function confignagios {
    sed -e "s/<DirectoryMatch \(.*\)/<DirectoryMatch \(\/usr\/lib\/cgi-bin\/nagios3\)>/" -i /etc/apache2/conf.d/nagios3.conf
}

function configmunin {
    ln -s /usr/share/munin/plugins/apache_* /etc/munin/plugins || true
    ln -s /usr/share/munin/plugins/mysql_* /etc/munin/plugins/ || true
    ln -s /usr/share/munin/plugins/freeradius_* /etc/munin/plugins || true
    ln -s '/etc/freeradius/sites-available/control-socket' '/etc/freeradius/sites-enabled/control-socket' || true
    sed -e "s/SOCKETFILE=\${socketfile:-\/var\/run\/radiusd\/radiusd.sock}/SOCKETFILE=\${socketfile:-\/var\/run\/freeradius\/freeradius.sock}/" -i /etc/munin/plugins/freeradius_acct
    sed -e "s/SOCKETFILE=\${socketfile:-\/var\/run\/radiusd\/radiusd.sock}/SOCKETFILE=\${socketfile:-\/var\/run\/freeradius\/freeradius.sock}/" -i /etc/munin/plugins/freeradius_auth

    if grep freeradius /etc/munin/plugin-conf.d/munin-node; then
        echo "[freeradius*]" >> /etc/munin/plugin-conf.d/munin-node
        echo "user root" >> /etc/munin/plugin-conf.d/munin-node
    fi
    service munin-node restart
    echo "End config munin"
}

function installmodules {
    echo "Configuration of modules"
    rm -f ${APACHE_PATH}/sites-enabled/000-default
    echo "Configuring apache for Radius... Enable ssl and rewrite modules."
    a2enmod ssl >> $OUT 2>>$LOG
    a2enmod rewrite >> $OUT 2>>$LOG
}

function restartservices {
    echo "Restarting elasticsearch..."
    service elasticsearch restart
    echo "Restarting Rsyslog..."
    service rsyslog restart
    echo "Restarting Freeradius..."
    service freeradius restart
    #echo "Restarting Apache2..."
    #service apache2 restart
    echo "Restarting Tftpd..."
    sudo service tftpd-hpa stop
    /usr/sbin/in.tftpd --listen --user snack --address 0.0.0.0:69 --secure $TFTP_FOLDER -c
    echo "Restarting Snmptrapd..."
    snmptrapd
    echo "Done..."
}

function createFilesfromTemplates {
    VARFILE="$USER_HOME/conf/jinja/var.yml"
    echo "projectname: 'snack'" > $VARFILE
    echo "username: 'radius'" >> $VARFILE
    echo "password: '${PASSWORD_RADIUS}'" >> $VARFILE
    echo "certdays: '3650'" >> $VARFILE
    IP=`ip a | grep eth. | grep '[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*' | head -1 | cut -d ' ' -f6 | cut -d '/' -f1`
    if [[ ! -z "$IP" ]]; then
        echo "ipaddr: '$IP'" >> $VARFILE
    fi
    echo "clientname: '${CLIENTNAME}'" >> $VARFILE
    cd $USER_HOME/conf/jinja && python config.py >> $OUT 2>>$LOG
    datetime=$(date +%Y%m%d-%H:%M)
    mkdir $(pwd)/backup/$datetime
    rsync -avr --backup --backup-dir=$(pwd)/backup/$datetime files/* / >> $OUT 2>>$LOG
    if [ ! -f /etc/apache2/sites-enabled/snack ]; then
        ln -s /etc/apache2/sites-available/snack /etc/apache2/sites-enabled/snack
    fi
    if [ ! -f /etc/freeradius/sites-enabled/snack ]; then 
        ln -s /etc/freeradius/sites-available/snack /etc/freeradius/sites-enabled/snack
    fi
}

function init {
    echo "Initialization of database"
    echo "Configuring Mysql"

    ##############################################################
    # Radius-Mysql configuration / Configuration de Radius-Mysql #
    ##############################################################
    # Create database + Add default admin user account
    # Création de la base de donnée + Ajout d'un compte administrateur par défaut
    db_get snack/sqlpassword
    PASSWORD_DB_ROOT=$RET
    db_get snack/password
    PASSWORD_RADIUS=$RET
    MYSQL_CMD="SHOW databases;"
    MYSQL_RES=$(echo $MYSQL_CMD | mysql -uroot -p${PASSWORD_DB_ROOT} | grep ${DATABASE} || true)
    if [[ $MYSQL_RES == "radius" ]]; then
        db_input critical snack/db_exists || true
        db_go
        db_get snack/db_exists
        if [ $RET == true ]; then
            echo "Drop database"
            echo "DROP DATABASE ${DATABASE};" | mysql -uroot -p${PASSWORD_DB_ROOT} >>$OUT 2>>$LOG
        else
            break
            echo "Installation failed"
        fi
    fi
    echo "Create database"
    MYSQL_CMD="CREATE DATABASE ${DATABASE} DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\
                GRANT ALL ON ${DATABASE}.* to radius@localhost identified by '${PASSWORD_RADIUS}';\
                flush privileges;"
    MYSQL_RES=$(echo $MYSQL_CMD | mysql -uroot -p${PASSWORD_DB_ROOT} 2>&1 >>$OUT)
    RES=$?
    until [ $RES -eq 0 ]
    do
	    db_input high snack/sqlpassword || true
      	db_go
        db_get snack/sqlpassword
	    PASSWORD_DB_ROOT=$RET
        MYSQL_CMD="CREATE DATABASE ${DATABASE} DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;\
                GRANT ALL ON ${DATABASE}.* to radius@localhost identified by '${PASSWORD_RADIUS}';\
                flush privileges;"
        MYSQL_RES=$(echo $MYSQL_CMD | mysql -uroot -p${PASSWORD_DB_ROOT} 2>&1 >>$OUT)
        RES=$?
    done
    mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} < $USER_HOME/conf/sql/schema.sql >> $OUT 2>>$LOG

    echo "Generate Salt..."
    key=$(makepasswd --chars 40)
    #key=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c40)
    echo $key
    sed -e "s/'Security\.salt',.*/'Security\.salt', '$key');/" -i /home/snack/interface/app/Config/core.php.default
    cryptpass=$(echo -n "$key${PASSWORD_RADIUS}" | sha1sum | awk '{print $1}')
    sqldate=$(date "+%Y-%m-%d %H:%M:%S")
    echo "INSERT INTO snackuser(username, password, role, created) VALUES ('admin', '$cryptpass', 'root', '$sqldate');" | mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} >> $OUT 2>>$LOG
    echo "INSERT INTO nas(nasname, shortname, secret) VALUES ('127.0.0.1', 'loop', 'loopsecret');" | mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} >> $OUT 2>>$LOG
    echo "INSERT INTO backups(nas,action) VALUES('127.0.0.1','boot');" | mysql -uroot -p${PASSWORD_DB_ROOT} ${DATABASE} >> $OUT 2>>$LOG

    ##############################
    # Certificates / Certificats #
    ##############################
    db_get snack/ca_common_name
    CLIENTNAME=$RET

    ############################
    # createFilesfromTemplates #
    ############################
    echo "Configuring Freeradius"
    createFilesfromTemplates
    #key=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c32)
    key=$(makepasswd --chars 32)
    sed -e "s/'Security\.snackkey',.*/'Security\.snackkey', '$key');/" -i /home/snack/interface/app/Config/core.php.default
    cp /home/snack/interface/app/Config/parameters.php.default /home/snack/interface/app/Config/parameters.php
    cp /home/snack/interface/app/Config/database.php.default /home/snack/interface/app/Config/database.php
    cp /home/snack/interface/app/Config/core.php.default /home/snack/interface/app/Config/core.php

    # Creation of the Authority Certificate (CA)
    # Création du certificat d'autorité (CA)
    echo "Generates certificates ... Could take a long time."
    openssl genrsa -out $DEST_PATH/private/$CA_KEY 4096 >> $OUT 2>>$LOG

    openssl req \
	    -new \
	    -key $DEST_PATH/private/$CA_KEY \
	    -subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName="$CLIENTNAME"/ \
	    -out $DEST_PATH/private/$CA_REQ >> $OUT 2>>$LOG

    openssl ca \
        -config /etc/ssl/openssl.cnf \
        -create_serial \
        -out $DEST_PATH/private/$CA_CERT \
        -days $CERT_VALIDITY \
        -batch \
        -keyfile $DEST_PATH/private/$CA_KEY \
        -selfsign \
        -extensions v3_ca \
        -infiles $DEST_PATH/private/$CA_REQ >> $OUT 2>>$LOG

    openssl	req -new -x509 -days 3650 -nodes \
	    -subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName="$CLIENTNAME"/ \
	    -out $DEST_PATH/apache.pem \
	    -keyout $DEST_PATH/apache.key >> $OUT 2>>$LOG

    openssl x509 \
	    -outform der \
	    -in $DEST_PATH/private/$CA_CERT \
	    -out $DEST_PATH/private/$CA_CERT_CER >> $OUT 2>>$LOG

    # Symlink for the interface
    ln -s $DEST_PATH/private/$CA_CERT $DEST_PATH/$CA_CERT || true
    ln -s $DEST_PATH/private/$CA_CERT_CER $DEST_PATH/$CA_CERT_CER || true

    # Creation of the radius certificate
    # Création du certificat authentifiant le server radius
    echo "Generate freeradius certificate ... Could take a long time."
    openssl genrsa -out $DEST_PATH/private/$RADIUS_KEY 4096 >> $OUT 2>>$LOG

    openssl req \
	    -config /etc/ssl/openssl.cnf -new -key $DEST_PATH/private/$RADIUS_KEY \
	    -subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName=`hostname`/ \
	    -out $DEST_PATH/private/$RADIUS_REQ \
	    -days $CERT_VALIDITY >> $OUT 2>>$LOG

    openssl ca \
	    -config /etc/ssl/openssl.cnf \
	    -policy policy_anything \
	    -out $DEST_PATH/private/$RADIUS_CERT \
	    -days $CERT_VALIDITY \
	    -batch \
	    -extensions xpserver_ext \
	    -infiles $DEST_PATH/private/$RADIUS_REQ >> $OUT 2>>$LOG

    # First CRL Generation + link to permit revocation verifications
    # Première génération de la CRL + permission de révocation
    echo "Generates certificates revocation list... Could take a long time."
    openssl ca \
	    -config /etc/ssl/openssl.cnf \
	    -gencrl \
	    -out $DEST_PATH/crl/crl.pem >> $OUT 2>>$LOG

    HASH=`openssl x509 -noout -hash -in $DEST_PATH/private/$CA_CERT`
    ln -s $DEST_PATH/private/$CA_CERT $DEST_PATH/certs/$HASH.0 || true
    ln -s $DEST_PATH/crl/crl.pem $DEST_PATH/certs/$HASH.r0 || true

    # First, we must create those two file
    # On doit d'abord créer ces deux fichiers
    echo "Configure random module... Could take a long time."
    dd if=/dev/urandom of=$DEST_PATH/random count=2 >> $OUT 2>>$LOG
    openssl dhparam -check -text -5 1024 -out $DEST_PATH/dh >> $OUT 2>>$LOG

    # Setting access groups to include web interface and radius
    # Nouveau groupe regroupant l'interface et le radius
    usermod -a -G snack $RADIUS_USER >> $OUT 2>>$LOG
    usermod -a -G snack $INTERFACE_USER >> $OUT 2>>$LOG

    #####################################################
    #Configuration backups/Sauvegarde des configurations#
    #####################################################
    echo "Configuring backups system..."
    mkdir -p $TFTP_FOLDER >> $OUT 2>>$LOG
    mkdir -p $BACKUP_FOLDER >> $OUT 2>>$LOG
    cd $BACKUP_FOLDER && git init >> $OUT 2>>$LOG

}

case $1 in
    configure)
        if [ "$2" == ""  ]; then
            echo "INSTALLATION"
            init || true
            confignagios || true
            configmunin || true
            installmodules || true
	    installelasticsearch || true
            $USER_HOME/interface/tools/fixperms.sh || true
            restartservices || true
            service apache2 restart
	    db_stop
        else
	        line=`grep "Issuer: C=FR, ST=France, O=B.H. Consulting, CN=" /home/snack/cert/cacert.pem`
	        regex="Issuer:.*CN=(.*)"
	        if [[ $line =~ $regex ]]; then
        		CLIENTNAME=${BASH_REMATCH[1]}
	        fi
            PASSWORD_RADIUS=`grep password $DATABASEFILE | head -n 1 | cut -d'>' -f2 | cut -d"'" -f2`
            createFilesfromTemplates || true
            confignagios || true
            installmodules || true
            echo "UPGRADE from $2"
            echo "Delete cache of cakephp"
            rm $USER_HOME/interface/app/tmp/cache/persistent/my* || true
	        rm $USER_HOME/interface/app/tmp/cache/models/my* || true
            #rsync -avr /home/snack/conf/sudoers.d /etc >> $OUT 2>>$LOG
            cp /root/backup-snack/parameters.php /home/snack/interface/app/Config || true
            cp /root/backup-snack/database.php /home/snack/interface/app/Config || true
            cp /root/backup-snack/core.php /home/snack/interface/app/Config || true
       	    #rm -rf /root/backup-snack || true
            db_stop
	        if dpkg --compare-versions "$2" le 1.0-9; then
	            sed -e "s/unique_subject\s*=\s*yes\s*/unique_subject = no/" -i $DEST_PATH/index.txt.attr
		        openssl ca \
                		-config /etc/ssl/openssl.cnf \
                		-policy policy_anything \
                		-out $DEST_PATH/private/$RADIUS_CERT \
                		-days $CA_CERT_VALIDITY \
                		-batch \
                		-extensions xpserver_ext \
                		-infiles $DEST_PATH/private/$RADIUS_REQ

	            sed -e "s/unique_subject\s*=\s*yes\s*/unique_subject = yes/" -i $DEST_PATH/index.txt.attr
	        fi
	        if dpkg --compare-versions "$2" le 1.0-26; then
		        echo "< 1.0-26"
		        echo "ALTER TABLE radacct MODIFY nasportid varchar(64) default NULL;" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG
		        openssl x509 -outform der -in $DEST_PATH/private/$CA_CERT -out $DEST_PATH/private/$CA_CERT_CER
		        # Symlink for the interface
		        ln -s $DEST_PATH/private/$CA_CERT_CER $DEST_PATH/$CA_CERT_CER
		        rsync -avr /home/snack/conf/cron.d /etc >> $OUT 2>>$LOG
		        echo 'update radcheck set value="Ethernet|Wireless-802.11" where value="Ethernet" and attribute="NAS-Port-Type";' | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG
		        echo 'update radcheck set value="Async|Virtual|Ethernet|Wireless-802.11" where value="Async|Virtual|Ethernet" and attribute="NAS-Port-Type";' | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG
		        echo 'update radcheck set value="Async|Ethernet|Wireless-802.11" where value="Async|Ethernet" and attribute="NAS-Port-Type";' | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG
		        echo 'update radcheck set value="Virtual|Ethernet|Wireless-802.11" where value="Virtual|Ethernet" and attribute="NAS-Port-Type";' | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG
		        sed -e '0,/#\(\s*sql\)/s//\1/' -i $INNER_TUNNEL_VIRTUAL_SERVER >> $OUT 2>>$LOG
		        service cron restart
		        service freeradius restart
     	    fi
	        if dpkg --compare-versions "$2" le 1.0-62; then
		        echo "< 1.0-62"
                echo "ALTER TABLE raduser ADD is_windowsad boolean default '0';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	        fi
	        if dpkg --compare-versions "$2" le 1.0-69; then
		        openssl req -new -x509 -days 3650 -nodes \
              	    -subj /countryName=FR/stateOrProvinceName=France/localityName=Nancy/organizationName="B.H. Consulting"/commonName="$CLIENTNAME"/ \
               	    -out $DEST_PATH/apache.pem \
               	    -keyout $DEST_PATH/apache.key >> $OUT 2>>$LOG
	        fi
	        if dpkg --compare-versions "$2" le 1.0-72; then   
		        mv $USER_HOME/interface/app/webroot/conf/*.tar.gz $USER_HOME/interface/app/conf || true
		        rm -rf $USER_HOME/interface/app/webroot/conf || true
		        configmunin || true
	        fi
	        if dpkg --compare-versions "$2" le 1.0-75; then
                echo "ALTER TABLE nas ADD version varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
       	        echo "ALTER TABLE nas ADD image varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	            echo "ALTER TABLE nas ADD serialnumber varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	            echo "ALTER TABLE nas ADD model varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	        fi
	        if dpkg --compare-versions "$2" le 1.0-78; then
                echo "ALTER TABLE nas ADD login varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
       	        echo "ALTER TABLE nas ADD password varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	            echo "ALTER TABLE nas ADD enablepassword varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	            echo "ALTER TABLE nas ADD backuptype varchar(255) default '';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
	        fi
            if dpkg --compare-versions "$2" le 1.0-88; then
                key=$(openssl rand -base64 32)
                sed -e "s/'Security\.snackkey',.*/'Security\.snackkey', '$key');/" -i /home/snack/interface/app/Config/core.php.default
                cp /home/snack/interface/app/Config/core.php.default /home/snack/interface/app/Config/core.php
            fi
	        if dpkg --compare-versions "$2" le 1.0-95; then
		        installelasticsearch || true
	        fi
	        if dpkg --compare-versions "$2" le 1.0-97; then
		        key=$(makepasswd --chars 40)
	            sed -e "s/'Security\.salt',.*/'Security\.salt', '$key');/" -i /home/snack/interface/app/Config/core.php.default
	         	cp /home/snack/interface/app/Config/core.php.default /home/snack/interface/app/Config/core.php
		        convertsnackusers || true
		        mkdir -p $TFTP_FOLDER
		        chown root:snack $TFTP_FOLDER
		        chmod 770 $TFTP_FOLDER
		        echo "Restarting Tftpd..."
        		sudo service tftpd-hpa stop
        		/usr/sbin/in.tftpd --listen --user snack --address 0.0.0.0:69 --secure $TFTP_FOLDER -c
	        fi
		if dpkg --compare-versions "$2" le 1.0-104; then
		    echo "ALTER TABLE nas ADD backup boolean default false;" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
		    echo "DELETE from radcheck where attribute='EAP-Type';" | mysql -uradius -p${PASSWORD_RADIUS} ${DATABASE} >> $OUT 2>>$LOG || true
		fi
	        #service apache2 restart
            $USER_HOME/interface/tools/fixperms.sh || true
	    fi
	    restartservices || true
	    exit 0
        ;;
    abort-upgrade|abort-remove|abort-deconfigure)
        # Do nothing
	    exit 0
        ;;
    *)
        echo "Unrecognized postinst argument '$1'"
        exit 1
	;;
esac

